diff --git a/resources/js/Pages/Management/DataTableProducts/DataTableProducts.vue b/resources/js/Pages/Management/DataTableProducts/DataTableProducts.vue
index 15bbc94..eac6292 100644
--- a/resources/js/Pages/Management/DataTableProducts/DataTableProducts.vue
+++ b/resources/js/Pages/Management/DataTableProducts/DataTableProducts.vue
@@ -47,6 +47,7 @@ import { toast } from 'vue-sonner'
 import { dateToDayMonthYearFormat, dateToISOFormat, formatMoney } from '@/util'
 import renderToast from '@/components/renderPromiseToast'
 import { computed } from 'vue'
+import useDataToTableFormat from './composable/dataToTableFormat'
 
 const props = defineProps({
     createOrderData: { type: null, required: false },
@@ -77,7 +78,6 @@ const { toCurrency, toFloat } = formatMoney()
 
 const { width } = useWindowSize()
 
-
 const emit = defineEmits(['callback:payloadPedido', 'update:specialOfferCreated'])
 
 const handleCallbackPedido = () => {
@@ -146,99 +146,6 @@ const handleStatusChange = () => {
     return toast.info('Status Alterado!')
 }
 
-const paymentFormToIndex = {
-    'Dinheiro': 1,
-    'Cartão': 2,
-    'Pix': 3,
-    'Transferência': 4
-}
-
-const handleOrderData = (order, products) => {
-    console.log(order)
-    const { obs, itensPedido, total, endereco, distribuidor, formaPagamento: paymentString, trocoPara: orderTroco, agendado, dataAgendada, horaInicio, idEndereco, id: idPedido, status: orderStatus } = order
-    const { id: idDistribuidor } = distribuidor
-    const { observacao } = endereco
-    const trocoPara = toFloat(orderTroco)
-    const formaPagamento = paymentFormToIndex[paymentString]
-    isUpdate.value = true
-
-    const newProducts = mapProductsWithPrices(products, itensPedido)
-    orderState.tableData = newProducts
-
-    const itens = mapOrderItems(itensPedido)
-
-    orderState.status = orderStatus
-
-    const totalProdutos = itens.map(product => parseFloat(product.subtotal)).reduce((curr, prev) => curr + prev);
-
-    orderState.payload = { ...orderState.payload, formaPagamento, trocoPara, agendado, dataAgendada, horaInicio, obs, observacao, totalProdutos, total: toFloat(total), idEndereco, itens, idPedido, idDistribuidor, status: order.statusId }
-}
-
-const mapProductsWithPrices = (products, orderItems) => {
-    return products.map(product => {
-        const productToChange = orderItems.find(prod => prod.idProduto === product.id)
-        if (!productToChange) return product
-
-        return mapProductPrice(product, productToChange)
-    })
-}
-
-const mapProductPrice = (product, orderItem) => {
-    if (product.precoEspecial) {
-        const precoEspecial = product.precoEspecial[product.precoEspecial.length - 1]
-        return {
-            ...product,
-            preco: [{ qtd: product.preco[0].qtd, val: toFloat(orderItem.preco) }],
-            precoEspecial: [{ qtd: precoEspecial.qtd, val: precoEspecial.val }]
-        }
-    }
-    return {
-        ...product,
-        preco: [{ qtd: product.preco[0].qtd, val: toFloat(orderItem.preco) }]
-    }
-}
-
-const mapOrderItems = (itensPedido) => {
-    return itensPedido.map(item => {
-        const { preco: itemPreco, qtd: quantidade, subtotal: itemSubtotal, id, precoAcertado, idProduto } = item
-        const preco = toFloat(itemPreco)
-        const subtotal = toFloat(itemSubtotal)
-
-        return {
-            idProduto,
-            preco,
-            precoAcertado,
-            quantidade,
-            subtotal
-        }
-    })
-}
-
-const dataToTable = (data) => {
-    const { products, distributorTaxes, distributor, address } = data
-    const { taxaUnica: taxaEntrega } = distributorTaxes
-    const { id: idDistribuidor, nome: distributorName } = distributor
-    const { id: idEndereco, observacao, idCliente } = address
-
-    clientId.value = idCliente
-
-    tableIdentifier.value = distributorName
-
-    addressNote.value = observacao
-
-    const order = data.order
-
-    if (order) {
-        console.log(data.formaPagamento)
-        handleOrderData(order, products)
-        return
-    }
-
-    orderState.tableData = products
-
-    orderState.payload = { ...orderState.payload, taxaEntrega, idDistribuidor, idEndereco }
-}
-
 watch(() => width.value, (newVal) => {
     if (newVal <= 768) {
         resizebleColumns.value = [...columns].filter(column => !['nome', 'descricao'].includes(column.id))
@@ -308,16 +215,12 @@ const calculateOrderTotals = (newData) => {
         const totalProdutos = itens.reduce((sum, product) => sum + product.subtotal, 0)
         const total = totalProdutos + orderState.payload.taxaEntrega
 
-        console.log(orderState.payload)
-
         orderState.payload = {
             ...orderState.payload,
             totalProdutos,
             total,
             itens
         }
-
-        console.log(orderState.payload)
     } catch (error) {
         console.log(error)
         disabledButton.value = true
@@ -326,8 +229,22 @@ const calculateOrderTotals = (newData) => {
 }
 
 onMounted(() => {
+    const { products: rawProducts, distributorTaxes, distributor, address } = props.createOrderData
+    const { taxaUnica: taxaEntrega } = distributorTaxes
+    const { id: idDistribuidor, nome: distributorName } = distributor
+    const { id: idEndereco, observacao, idCliente } = address
+    const order = props.createOrderData.order
+
+    const { updateOrder, orderPayload, orderStatus, products } = useDataToTableFormat(rawProducts, taxaEntrega, idDistribuidor, idEndereco, order)
+
+    isUpdate.value = updateOrder
+    orderState.payload = { ...orderState.payload, ...orderPayload }
+    orderState.status = orderStatus
+    orderState.tableData = products
+    clientId.value = idCliente
+    tableIdentifier.value = distributorName
+    addressNote.value = observacao
     table.setPageSize(pageSizes.value[0])
-    dataToTable(props.createOrderData)
 })
 
 
diff --git a/resources/js/Pages/Management/DataTableProducts/config/Columns.js b/resources/js/Pages/Management/DataTableProducts/config/Columns.js
index 94e6e2a..68c5f71 100644
--- a/resources/js/Pages/Management/DataTableProducts/config/Columns.js
+++ b/resources/js/Pages/Management/DataTableProducts/config/Columns.js
@@ -82,9 +82,6 @@ export const columns = [
             const rowIndex = row.index;
             const itens = table.options.meta.payload.itens;
             const { tableData } = table.options.meta;
-            console.log(table.options.meta);
-            console.log(tableData);
-            console.log(tableData[rowIndex]);
             const getOffer = () => {
                 if (tableData[rowIndex]?.precoEspecial) return true;
                 return false;
